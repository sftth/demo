#!groovy

env.projectid

pipeline {
    agent any

    stages {
        stage('mvn Build') {
            steps {
                echo '========================2. Maven Build ====================='
                sh " chmod +x ./mvnw"
                sh "./mvnw clean package"
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh './mvnw sonar:sonar'
                }
            }
        }
        stage('SonarQube Quality Gate') {
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                   //waitForQualityGate abortPipeline: true
                   script{
                        echo "Start~~~~"
                        def qg = waitForQualityGate()
                        echo "Status: ${qg.status}"
                        if(qg.status != 'OK') {
                            echo "NOT OK Status: ${qg.status}"
                            updateGitlabCommitStatus(name: "SonarQube Quality Gate", state: "failed")
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        } else{
                            echo "OK Status: ${qg.status}"
                            updateGitlabCommitStatus(name: "SonarQube Quality Gate", state: "success")
                        }
                        echo "End~~~~"
                    }
                }
            }
        }
    }
    

    post {
        always {
            junit '**/target/surefire-reports/TEST-*.xml'
        }
    }
}